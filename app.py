import streamlit as st
import pandas as pd
import numpy as np
import joblib
import pickle
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ feature names
@st.cache_resource
def load_model():
    pipeline = joblib.load('car_price_pipeline.pkl')
    with open('feature_names.pkl', 'rb') as f:
        feature_names = pickle.load(f)
    return pipeline, feature_names

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è preprocessing –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
def preprocess_input(input_dict, feature_names):
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    input_df = pd.DataFrame([input_dict])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å NaN
    for col in feature_names:
        if col not in input_df.columns:
            input_df[col] = np.nan
    
    # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–∫ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    input_df = input_df[feature_names]
    
        
    return input_df

# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
    page_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ê–≤—Ç–æ",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
    )

    
    st.title("üöó Car Price Prediction App")
    st.markdown("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    try:
        pipeline, feature_names = load_model()
        st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return
    
    with st.form("car_form"):
        st.header("üìä –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
                
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
            vehicle_manufacturer = st.selectbox(
                "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å",
                ['HYUNDAI', 'TOYOTA', 'BMW', 'MAZDA', 'NISSAN', 'DODGE', 'MINI',
                'CHEVROLET', 'MITSUBISHI', 'MERCEDES-BENZ', 'LEXUS', 'VOLKSWAGEN',
                'JEEP', 'HONDA', 'FORD', 'OPEL', 'AUDI', 'KIA', 'SUBARU', 'FIAT',
                'LAND ROVER', 'VAZ', 'PORSCHE', 'INFINITI', 'SSANGYONG',
                'ASTON MARTIN', 'JAGUAR', 'SUZUKI', 'LINCOLN', 'CHRYSLER', 'SKODA',
                'VOLVO', 'MG', 'BUICK', 'CADILLAC', 'GREATWALL', 'DAIHATSU',
                'SEAT', 'RENAULT', 'MERCURY', 'FERRARI']
            )
            
            vehicle_year = st.number_input(
                "–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞",
                min_value=1940,
                max_value=datetime.now().year,
                value=2018
            )
            
            current_mileage = st.number_input(
                "–ü—Ä–æ–±–µ–≥ (–∫–º)",
                min_value=0,
                max_value=500000,
                value=50000
            )
        
        with col2:
                            
            vehicle_gearbox_type = st.selectbox(
                "–¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è",
                ['Tiptronic', 'Automatic', 'Manual', 'Variator']
            )
        
            doors_cnt = st.selectbox(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π", 
                [' 2/3', ' 4/5', ' >5']
            )
            
            wheels = st.selectbox(
                "–ü—Ä–∏–≤–æ–¥",
                ['Left wheel', 'Right-hand drive']
            )

        with col3:  
            st.subheader("–í–Ω–µ—à–Ω–∏–π –≤–∏–¥")  
            car_leather_interior = st.selectbox(
                "–ö–æ–∂–∞–Ω—ã–π —Å–∞–ª–æ–Ω",
                [0, 1],
                format_func=lambda x: "–î–∞" if x == 1 else "–ù–µ—Ç"
            )
        
            vehicle_color = st.selectbox(
                "–¶–≤–µ—Ç –∫—É–∑–æ–≤–∞",
                [' Silver ', ' White ', ' Grey ', ' Black ', ' Carnelian red ',
                ' Blue ', ' Sky blue ', ' Golden ', ' Brown ', ' Red ', ' Beige ',
                ' Green ', ' Pink ', ' Orange ', ' Yellow ', ' Purple ']
                )      
                
                
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        submitted = st.form_submit_button("üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å")
    
    with col2:
        st.header("üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.info("""
        **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
        1. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
        2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å'
        3. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –Ω–∏–∂–µ
        """)
        
        st.header("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç")
        result_placeholder = st.empty()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    if submitted:
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –≤–≤–æ–¥ –≤ —Å–ª–æ–≤–∞—Ä—å
            input_data = {
                'vehicle_manufacturer': vehicle_manufacturer,
                'current_mileage': current_mileage,
                'vehicle_year': vehicle_year,
                'vehicle_gearbox_type': vehicle_gearbox_type,
                'doors_cnt': doors_cnt,
                'wheels': wheels,
                'vehicle_color': vehicle_color,
                'vehicle_interior_color': vehicle_interior_color,
                'car_leather_interior': car_leather_interior,
                
            }
            
            # Preprocessing
            input_df = preprocess_input(input_data, feature_names)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = pipeline.predict(input_df)[0]
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with result_placeholder.container():
                st.success(f"### –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${prediction:,.2f}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                st.markdown("---")
                st.subheader("–î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
                st.metric("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞", f"${prediction:,.2f}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                with st.expander("–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                    st.json(input_data)
                    
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ sidebar
    st.sidebar.header("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    st.sidebar.info("""
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è 
    –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.
    
    **–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã:**
    - Random Forest Regressor
    - Gradient Boosting
    - –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    
    **–î–∞–Ω–Ω—ã–µ:** –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    """)
    
    st.sidebar.header("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.sidebar.text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_names)}")
    st.sidebar.text(f"–ú–æ–¥–µ–ª—å: {type(pipeline.named_steps['regressor']).__name__}")

if __name__ == "__main__":
    main()